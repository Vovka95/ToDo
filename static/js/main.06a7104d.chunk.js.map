{"version":3,"sources":["components/Menu.js","components/Todo/TaskForm.js","components/Todo/TaskList.js","components/Todo/ToDo.js","components/Registration/Registration.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","className","Navbar","color","light","expand","Link","to","src","alt","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","Button","Component","TaskForm","Form","onSubmit","addTask","FormGroup","Label","for","Input","type","name","id","value","currentValue","onChange","updateTask","TaskList","renderTask","ListGroupItem","Row","Col","xl","lg","md","xs","details","toggleState","deleteTask","index","isEdit","updateTaskItem","event","preventDefault","editTask","input","renderUpdateForm","ref","defaultValue","react","ToDo","target","tasks","push","splice","_this2","taskList","map","task","Todo_TaskList","key","update","handleChange","Container","components_Menu","Todo_TaskForm","ListGroup","Registration","activeTab","tab","tabs","NavLink","classnames","active","TabContent","TabPane","tabId","sm","inline","row","placeholder","size","check","offset","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06a7104d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Button } from 'reactstrap';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.toggle = this.toggle.bind(this);\n        this.state = {\n          isOpen: false\n        };\n      }\n      toggle() {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"navBar\">\n                <Navbar color=\"light\" light expand=\"md\">\n                    <Link className=\"brand\" to=\"/todo\">\n                        <img className=\"logo\" src=\"../logo.ico\" alt=\"logo\"/> \n                        <NavbarBrand >Todo</NavbarBrand>\n                    </Link>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                    <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <Link to=\"/registration\"><Button color=\"success\">Registration</Button></Link>\n                    </NavItem>\n                    </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default Menu;","import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\n\n const TaskForm = (props) => {\n     return (\n        <Form className=\"taskForm\" onSubmit={props.addTask}>\n            <FormGroup>\n                <Label for=\"taskName\">Task Name</Label>\n                <Input type=\"text\" name=\"taskName\" id=\"taskName\" value={props.currentValue} onChange={props.updateTask} />\n            </FormGroup>\n            <Button color=\"success\">Add Task</Button>\n        </Form>\n     );\n }\n\n export default TaskForm; ","import React, {Component, Fragment} from 'react'\nimport { Button, ListGroupItem, Row, Col, Form } from 'reactstrap';\n\nclass TaskList extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            isEdit: false\n        }\n\n        this.renderTask = this.renderTask.bind(this);\n        this.renderUpdateForm = this.renderUpdateForm.bind(this);\n        this.toggleState = this.toggleState.bind(this);    \n    }\n\n    renderTask = () => {\n        return (\n            <ListGroupItem>\n                <Row>\n                    <Col xl={7} lg={7} md={12} xs={12}>\n                        <span>{this.props.details.name}</span>\n                    </Col>\n                    <Col xl={2} lg={2} md={6} xs={6}>\n                        <Button color=\"secondary\" onClick={() => {this.toggleState()}}>Edit</Button>\n                    </Col>\n                    <Col xl={3} lg={3} md={6} xs={6}>\n                        <Button color=\"danger\" onClick={() => {this.props.deleteTask(this.props.index)}}>Delete</Button>\n                    </Col>   \n                </Row>\n            </ListGroupItem>\n        )\n    }\n\n    toggleState = () => {\n        let {isEdit} = this.state;\n        this.setState({\n            isEdit: !isEdit\n        })\n    }\n\n    updateTaskItem = (event) => {\n        event.preventDefault();\n        this.props.editTask(this.props.index, this.input.value);\n        this.toggleState();\n    }\n\n    renderUpdateForm = () => {\n        return(\n            <ListGroupItem>\n                <Form onSubmit={this.updateTaskItem}>\n                    <Row>\n                        <Col xl={9} lg={9} md={12} xs={12}>\n                            <input type=\"text\" name=\"editTaskName\" id=\"editTaskName\" ref={(value) => {this.input = value}} defaultValue={this.props.details.name} />\n                        </Col>\n                        <Col xl={3} lg={3} md={12} xs={12}>\n                            <Button color=\"success\">Update</Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </ListGroupItem>\n        )\n    }\n    \n    render() {\n        let {isEdit} = this.state;\n        return (\n            <Fragment>\n                { isEdit ? this.renderUpdateForm() : this.renderTask()}\n            </Fragment>\n        );\n    }\n}\n\nexport default TaskList;","import React, { Component } from 'react';\nimport { Container, Row, Col, ListGroup } from 'reactstrap';\n\nimport Menu from '../Menu';\nimport TaskForm from './TaskForm';\nimport TaskList from './TaskList';\n\nclass ToDo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks : [],\n      currentValue: ''\n    }\n  } \n\n  //updateTask\n  updateTask = (event) => {\n      this.setState({\n        currentValue: event.target.value\n      })\n  }\n\n  //addTask\n  addTask = (event) => {\n      event.preventDefault();\n      let currentValue = this.state.currentValue;\n      let tasks = this.state.tasks;\n      tasks.push({name: currentValue});\n      this.setState({\n        tasks,\n        currentValue: ''\n      })\n  }\n\n  //deleteTask\n  deleteTask = (index) => {\n    let tasks = this.state.tasks;\n    tasks.splice(index, 1);\n    this.setState({\n      tasks\n    })\n  }\n\n  //editTask\n  editTask = (index, value) => {\n    let tasks = this.state.tasks;\n    let task = tasks[index];\n    task['name'] = value;\n    this.setState({\n      tasks\n    })\n  }\n\n  render() {\n    const {tasks} = this.state;\n    const taskList = tasks.map( (task, index) => {\n      return <TaskList details={task} key={index} index={index} update={this.handleChange} deleteTask={this.deleteTask} editTask={this.editTask}/>\n    })\n    return (\n        <Container>\n        <div className=\"App\">\n          \n            <Menu></Menu>\n        \n            <Row>\n                <Col xl={3} lg={3} md={12} xs={12} >        \n                <TaskForm currentValue={this.state.currentValue} updateTask={this.updateTask} addTask={this.addTask}/>\n                </Col>\n                <Col xl={9} lg={9} md={12} xs={12} >        \n                <ListGroup>{taskList}</ListGroup>\n                </Col>\n            </Row>\n          \n        </div>\n      </Container>\n        \n            \n    );\n  }\n}\n\nexport default ToDo;","import React, { Component } from 'react';\nimport {Container, TabContent, TabPane, Nav, NavItem, NavLink, Row, Col, Button, Form, FormGroup, Label, Input} from 'reactstrap';\nimport classnames from 'classnames';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Menu from '../Menu';\n\nclass Registration extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.toggle = this.toggle.bind(this);\n        this.state = {\n          activeTab: '1'\n        };\n      }\n    \n      toggle(tab) {\n        if (this.state.activeTab !== tab) {\n          this.setState({\n            activeTab: tab\n          });\n        }\n      }\n  \n    render() {\n        return (\n            <Container>\n                <div className=\"App\">\n                \n                    <Menu></Menu>\n\n                    <Nav tabs>\n                        <NavItem>\n                            <NavLink\n                            className={classnames({ active: this.state.activeTab === '1' })}\n                            onClick={() => { this.toggle('1'); }}\n                            >\n                            Log In\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink\n                            className={classnames({ active: this.state.activeTab === '2' })}\n                            onClick={() => { this.toggle('2'); }}\n                            >\n                            Register\n                            </NavLink>\n                        </NavItem>\n                    </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId=\"1\">\n                        <Row className=\"regLogForm\">\n                            <Col sm=\"12\">\n                                <Form inline>\n                                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                                    <Label for=\"exampleEmail\" className=\"mr-sm-2\">Email</Label>\n                                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" />\n                                    </FormGroup>\n                                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                                    <Label for=\"examplePassword\" className=\"mr-sm-2\">Password</Label>\n                                    <Input type=\"password\" name=\"password\" id=\"examplePassword\" />\n                                    </FormGroup>\n                                    <Link to=\"/todo\"><Button>Submit</Button></Link>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                    <TabPane tabId=\"2\">\n                        <Row className=\"regLogForm\">\n                            <Col sm=\"12\">\n                                <Form>\n                                    \n                                    <Row>\n                                        <Col sm=\"6\">\n                                            <FormGroup row>\n                                            <Label for=\"exampleText\" sm={4}>First Name</Label>\n                                            <Col sm={8}>\n                                                <Input type=\"text\" name=\"text\" id=\"exampleText\" />\n                                            </Col>\n                                            </FormGroup>\n                                        </Col>\n                                        <Col sm=\"6\">\n                                            <FormGroup row>\n                                            <Label for=\"exampleText\" sm={4}>Surname</Label>\n                                            <Col sm={8}>\n                                                <Input type=\"text\" name=\"text\" id=\"exampleText\" />\n                                            </Col>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    \n                                    <FormGroup row>\n                                    <Label for=\"exampleEmail\" sm={2}>Email</Label>\n                                    <Col sm={10}>\n                                        <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"with a placeholder\" />\n                                    </Col>\n                                    </FormGroup>\n\n                                    <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>Password</Label>\n                                    <Col sm={10}>\n                                        <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password placeholder\" />\n                                    </Col>\n                                    </FormGroup>\n\n                                    <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>Confirm Password</Label>\n                                    <Col sm={10}>\n                                        <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password placeholder\" />\n                                    </Col>\n                                    </FormGroup>\n\n                                    <FormGroup row>\n                                    <Label for=\"checkbox2\" sm={2}>Checkbox</Label>\n                                    <Col sm={{ size: 3 }}>\n                                        <FormGroup check>\n                                        <Label check>\n                                            <Input type=\"checkbox\" id=\"checkbox2\" />{' '}\n                                            I am agree!\n                                        </Label>\n                                        </FormGroup>\n                                     </Col>\n                                     </FormGroup>\n\n                                    <FormGroup check row>\n                                    <Col sm={{ size: 10, offset: 2 }}>\n                                        <Link to=\"/todo\"><Button>Submit</Button></Link>\n                                    </Col>\n                                    </FormGroup>\n                                </Form>\n                            </Col>\n                        </Row>\n                    </TabPane>\n                </TabContent>\n                \n            </div>\n            </Container>\n                    \n        );\n    }\n}\n\nexport default Registration;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport ToDo from './components/Todo/ToDo';\nimport Registration from './components/Registration/Registration'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"/registration\" component={Registration} />\n          <Route path=\"/todo\" component={ToDo} />\n        </div>\n      </Router>\n      \n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}